// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using skipper_backend.Store;

#nullable disable

namespace skipper_backend.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20231029184456_editprojectcomment")]
    partial class editprojectcomment
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "cfc78945-56c7-4ac1-b393-d573fd14eb9d",
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        },
                        new
                        {
                            Id = "7f651bf7-fc36-42a5-ae23-e9a09de3279d",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("skipper_backend.Identity.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<double?>("BillingPerHour")
                        .HasColumnType("float");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EmployedAt")
                        .HasColumnType("datetime2");

                    b.Property<double?>("FixedSalaryGross")
                        .HasColumnType("float");

                    b.Property<Guid?>("LineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("PictureUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SkillsMatrixId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("LineId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("SkillsMatrixId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("skipper_backend.Models.CV.CV", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("About")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Rgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("CV");
                });

            modelBuilder.Entity("skipper_backend.Models.CV.CVItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CVId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationExperienceOrCert")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("From")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("To")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CVId");

                    b.ToTable("CVItem");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("EmployeeLanguage");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeePositionAndLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("LevelOfExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LevelOfExperienceId");

                    b.HasIndex("PositionId");

                    b.ToTable("EmployeePositionAndLevel");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeProject", b =>
                {
                    b.Property<Guid>("CompanyProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Utilization")
                        .HasColumnType("float");

                    b.Property<Guid>("UtilizationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CompanyProjectId", "UserId");

                    b.HasIndex("UserId");

                    b.HasIndex("UtilizationTypeId");

                    b.ToTable("EmployeeProject");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("GeneralSkillId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GeneralSkillId");

                    b.ToTable("EmployeeSkill");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.Line", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LineManagerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("LineManagerId");

                    b.ToTable("Line");
                });

            modelBuilder.Entity("skipper_backend.Models.General.AppPreferences", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rgb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AppPreferences");
                });

            modelBuilder.Entity("skipper_backend.Models.General.GeneralSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiringPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HiringPostId");

                    b.ToTable("GeneralSkill");
                });

            modelBuilder.Entity("skipper_backend.Models.General.Language", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Language");
                });

            modelBuilder.Entity("skipper_backend.Models.General.LanguageLevel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LanguageLevel");
                });

            modelBuilder.Entity("skipper_backend.Models.General.LevelOfExperience", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LevelOfExperience");
                });

            modelBuilder.Entity("skipper_backend.Models.General.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("skipper_backend.Models.General.UtilizationType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UtilizationType");
                });

            modelBuilder.Entity("skipper_backend.Models.GoalManagement.Goal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Goal");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.CompanyProject", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyProject");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.CompanyProjectFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyProjectId");

                    b.ToTable("CompanyProjectFile");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CommentorId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectComment");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectLead", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LeadId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeadId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectLead");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectTag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TagId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TagId");

                    b.ToTable("ProjectTag");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.Tag", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrix", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Rgb")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("SkillsMatrix");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("SkillsMatrixId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("SkillsMatrixId");

                    b.ToTable("SkillsMatrixInput");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixSingleSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<int>("RangeFrom")
                        .HasColumnType("int");

                    b.Property<int>("RangeTo")
                        .HasColumnType("int");

                    b.Property<string>("SkillDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SkillTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SkillsMatrixId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillsMatrixId");

                    b.ToTable("SkillsMatrixSingleSkill");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixSingleSkillInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Input")
                        .HasColumnType("int");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid?>("SkillsMatrixInputId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SkillsMatrixInputId");

                    b.ToTable("SkillsMatrixSingleSkillInput");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPost", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Budget")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("EmployeeLevelOfExperienceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PrefferedStart")
                        .HasColumnType("datetime2");

                    b.Property<string>("Rgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("UtilizationAmount")
                        .HasColumnType("float");

                    b.Property<Guid>("UtilizationTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.HasIndex("EmployeeLevelOfExperienceId");

                    b.HasIndex("UtilizationTypeId");

                    b.ToTable("HiringPost");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Accepted")
                        .HasColumnType("bit");

                    b.Property<string>("ApplicantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("HiringPostId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("HiringPostId");

                    b.ToTable("HiringPostApplication");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostComment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CommentorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("HiringPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CommentorId");

                    b.HasIndex("HiringPostId");

                    b.ToTable("HiringPostComment");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostFile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiringPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HiringPostId");

                    b.ToTable("HiringPostFile");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostRequiredLanguage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HiringPostId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("LanguageLevelId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HiringPostId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("LanguageLevelId");

                    b.ToTable("HiringPostRequiredLanguage");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Checkbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Checkbox");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.InputOptions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("RadioGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectMultipleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SelectSingleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RadioGroupId");

                    b.HasIndex("SelectMultipleId");

                    b.HasIndex("SelectSingleId");

                    b.HasIndex("SurveyAnswerId");

                    b.ToTable("InputOptions");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.NumberInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DefaultValue")
                        .HasColumnType("int");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxValue")
                        .HasColumnType("int");

                    b.Property<int>("MinValue")
                        .HasColumnType("int");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("NumberInput");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Radio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Radio");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.RadioGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("RadioGroup");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Rate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("AllowHalf")
                        .HasColumnType("bit");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("float");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Rate");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectMultiple", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SelectMultiple");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectSingle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("float");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("SelectSingle");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Slider", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("DefaultValue")
                        .HasColumnType("float");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelLeft")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LabelRight")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("MaxValue")
                        .HasColumnType("float");

                    b.Property<double>("MinValue")
                        .HasColumnType("float");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Slider");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CreatorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("EndDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Rgb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CreatorId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SurveyAssignee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ASssigneeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AssigneeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ASssigneeId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyAssignee");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.TextArea", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("TextArea");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.TextInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<string>("Placeholder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("TextInput");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool?>("CheckboxOrRadio")
                        .HasColumnType("bit");

                    b.Property<double?>("InputNumberOrRateOrSlider")
                        .HasColumnType("float");

                    b.Property<int>("OrderKey")
                        .HasColumnType("int");

                    b.Property<Guid?>("RadioGroupOrSingleSelectId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyInputId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TextInputOrArea")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RadioGroupOrSingleSelectId");

                    b.HasIndex("SurveyInputId");

                    b.ToTable("SurveyAnswer");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyInput", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RespondentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RespondentId");

                    b.HasIndex("SurveyId");

                    b.ToTable("SurveyInput");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("skipper_backend.Identity.User", b =>
                {
                    b.HasOne("skipper_backend.Models.Employee.Line", null)
                        .WithMany("Employees")
                        .HasForeignKey("LineId");

                    b.HasOne("skipper_backend.Models.SkillsMatrix.SkillsMatrix", null)
                        .WithMany("Assignees")
                        .HasForeignKey("SkillsMatrixId");
                });

            modelBuilder.Entity("skipper_backend.Models.CV.CV", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("skipper_backend.Models.CV.CVItem", b =>
                {
                    b.HasOne("skipper_backend.Models.CV.CV", "CV")
                        .WithMany("CVItems")
                        .HasForeignKey("CVId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CV");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeLanguage", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeePositionAndLevel", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.LevelOfExperience", "LevelOfExperience")
                        .WithMany()
                        .HasForeignKey("LevelOfExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.Position", "Position")
                        .WithMany()
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LevelOfExperience");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeProject", b =>
                {
                    b.HasOne("skipper_backend.Models.Project.CompanyProject", "CompanyProject")
                        .WithMany("Employees")
                        .HasForeignKey("CompanyProjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("skipper_backend.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.UtilizationType", "UtilizationType")
                        .WithMany()
                        .HasForeignKey("UtilizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProject");

                    b.Navigation("User");

                    b.Navigation("UtilizationType");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.EmployeeSkill", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.GeneralSkill", "GeneralSkill")
                        .WithMany()
                        .HasForeignKey("GeneralSkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("GeneralSkill");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.Line", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "LineManager")
                        .WithMany()
                        .HasForeignKey("LineManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineManager");
                });

            modelBuilder.Entity("skipper_backend.Models.General.GeneralSkill", b =>
                {
                    b.HasOne("skipper_backend.Models.Staffing.HiringPost", null)
                        .WithMany("GeneralSkills")
                        .HasForeignKey("HiringPostId");
                });

            modelBuilder.Entity("skipper_backend.Models.GoalManagement.Goal", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.CompanyProjectFile", b =>
                {
                    b.HasOne("skipper_backend.Models.Project.CompanyProject", "CompanyProject")
                        .WithMany()
                        .HasForeignKey("CompanyProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompanyProject");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectComment", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Commentor")
                        .WithMany()
                        .HasForeignKey("CommentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.Project.CompanyProject", "Project")
                        .WithMany("Comments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commentor");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectLead", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Lead")
                        .WithMany()
                        .HasForeignKey("LeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.Project.CompanyProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lead");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.ProjectTag", b =>
                {
                    b.HasOne("skipper_backend.Models.Project.CompanyProject", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.Project.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrix", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixInput", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.SkillsMatrix.SkillsMatrix", null)
                        .WithMany("Inputs")
                        .HasForeignKey("SkillsMatrixId");

                    b.Navigation("Assignee");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixSingleSkill", b =>
                {
                    b.HasOne("skipper_backend.Models.SkillsMatrix.SkillsMatrix", null)
                        .WithMany("Skills")
                        .HasForeignKey("SkillsMatrixId");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixSingleSkillInput", b =>
                {
                    b.HasOne("skipper_backend.Models.SkillsMatrix.SkillsMatrixInput", null)
                        .WithMany("Inputs")
                        .HasForeignKey("SkillsMatrixInputId");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPost", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.LevelOfExperience", "EmployeeLevelOfExperience")
                        .WithMany()
                        .HasForeignKey("EmployeeLevelOfExperienceId");

                    b.HasOne("skipper_backend.Models.General.UtilizationType", "UtilizationType")
                        .WithMany()
                        .HasForeignKey("UtilizationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");

                    b.Navigation("EmployeeLevelOfExperience");

                    b.Navigation("UtilizationType");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostApplication", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.Staffing.HiringPost", null)
                        .WithMany("Applications")
                        .HasForeignKey("HiringPostId");

                    b.Navigation("Applicant");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostComment", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Commentor")
                        .WithMany()
                        .HasForeignKey("CommentorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.Staffing.HiringPost", null)
                        .WithMany("Comments")
                        .HasForeignKey("HiringPostId");

                    b.Navigation("Commentor");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostFile", b =>
                {
                    b.HasOne("skipper_backend.Models.Staffing.HiringPost", null)
                        .WithMany("Files")
                        .HasForeignKey("HiringPostId");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPostRequiredLanguage", b =>
                {
                    b.HasOne("skipper_backend.Models.Staffing.HiringPost", null)
                        .WithMany("RequiredLanguages")
                        .HasForeignKey("HiringPostId");

                    b.HasOne("skipper_backend.Models.General.Language", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.General.LanguageLevel", "LanguageLevel")
                        .WithMany()
                        .HasForeignKey("LanguageLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("LanguageLevel");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Checkbox", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.InputOptions", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.RadioGroup", null)
                        .WithMany("RadioOptions")
                        .HasForeignKey("RadioGroupId");

                    b.HasOne("skipper_backend.Models.SurveyCreator.SelectMultiple", null)
                        .WithMany("SelectOptions")
                        .HasForeignKey("SelectMultipleId");

                    b.HasOne("skipper_backend.Models.SurveyCreator.SelectSingle", null)
                        .WithMany("SelectOptions")
                        .HasForeignKey("SelectSingleId");

                    b.HasOne("skipper_backend.Models.SurveySolver.SurveyAnswer", null)
                        .WithMany("MultipleSelect")
                        .HasForeignKey("SurveyAnswerId");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.NumberInput", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Radio", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.RadioGroup", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Rate", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectMultiple", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectSingle", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Slider", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Survey", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SurveyAssignee", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "ASssignee")
                        .WithMany()
                        .HasForeignKey("ASssigneeId");

                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ASssignee");

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.TextArea", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.TextInput", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", "Survey")
                        .WithMany()
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyAnswer", b =>
                {
                    b.HasOne("skipper_backend.Models.SurveyCreator.InputOptions", "RadioGroupOrSingleSelect")
                        .WithMany()
                        .HasForeignKey("RadioGroupOrSingleSelectId");

                    b.HasOne("skipper_backend.Models.SurveySolver.SurveyInput", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyInputId");

                    b.Navigation("RadioGroupOrSingleSelect");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyInput", b =>
                {
                    b.HasOne("skipper_backend.Identity.User", "Respondent")
                        .WithMany()
                        .HasForeignKey("RespondentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("skipper_backend.Models.SurveyCreator.Survey", null)
                        .WithMany("Inputs")
                        .HasForeignKey("SurveyId");

                    b.Navigation("Respondent");
                });

            modelBuilder.Entity("skipper_backend.Models.CV.CV", b =>
                {
                    b.Navigation("CVItems");
                });

            modelBuilder.Entity("skipper_backend.Models.Employee.Line", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("skipper_backend.Models.Project.CompanyProject", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Employees");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrix", b =>
                {
                    b.Navigation("Assignees");

                    b.Navigation("Inputs");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("skipper_backend.Models.SkillsMatrix.SkillsMatrixInput", b =>
                {
                    b.Navigation("Inputs");
                });

            modelBuilder.Entity("skipper_backend.Models.Staffing.HiringPost", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Comments");

                    b.Navigation("Files");

                    b.Navigation("GeneralSkills");

                    b.Navigation("RequiredLanguages");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.RadioGroup", b =>
                {
                    b.Navigation("RadioOptions");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectMultiple", b =>
                {
                    b.Navigation("SelectOptions");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.SelectSingle", b =>
                {
                    b.Navigation("SelectOptions");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveyCreator.Survey", b =>
                {
                    b.Navigation("Inputs");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyAnswer", b =>
                {
                    b.Navigation("MultipleSelect");
                });

            modelBuilder.Entity("skipper_backend.Models.SurveySolver.SurveyInput", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
